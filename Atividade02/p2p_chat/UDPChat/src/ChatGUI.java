
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author aluno
 */
public class ChatGUI extends javax.swing.JFrame {
    private ChatController chatController;
    

    /**
     * Creates new form ChatGUI
     */
    public ChatGUI() {
        initComponents();
       
        //chatController = new ChatController(this,6000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDestIP = new javax.swing.JLabel();
        lblDestPort = new javax.swing.JLabel();
        txtDestIP = new javax.swing.JTextField();
        txtDestPort = new javax.swing.JTextField();
        scrollMsgArea = new javax.swing.JScrollPane();
        areaMsg = new javax.swing.JTextArea();
        txtMsg = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        lblApelido = new javax.swing.JLabel();
        txtApelido = new javax.swing.JTextField();
        lblOrigPort = new javax.swing.JLabel();
        txtOrigPort = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDestIP.setText("IP destino: ");

        lblDestPort.setText("Porta destino :");

        txtDestIP.setText("127.0.0.1");

        txtDestPort.setText("6000");

        areaMsg.setEditable(false);
        areaMsg.setColumns(20);
        areaMsg.setRows(5);
        scrollMsgArea.setViewportView(areaMsg);

        btnEnviar.setMnemonic('E');
        btnEnviar.setText("Enviar");
        btnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarActionPerformed(evt);
            }
        });

        lblApelido.setText("Apelido");

        txtApelido.setText("Joao");

        lblOrigPort.setText("Porta origem :");

        txtOrigPort.setText("6000");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblOrigPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOrigPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(txtMsg)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnEnviar))
                        .addComponent(scrollMsgArea, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblDestPort, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDestIP, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDestPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(lblApelido, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDestIP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApelido, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestIP)
                    .addComponent(txtDestIP, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestPort)
                    .addComponent(txtDestPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblApelido)
                    .addComponent(txtApelido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOrigPort)
                    .addComponent(txtOrigPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollMsgArea, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMsg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnviar))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /*
    - tipo de mensagem [1 byte]
    - tamanho apelido (tam_apl) [1 byte]
    - apelido [tam_apl (1 a 64) bytes ]
    - tamanho mensagem (tam_msg) [1 byte]
    - mensagem [tam_msg bytes]
    
    TIPOS DE MENSAGENS :
    1: mensagem normal
    2: emoji
    3: URL
    4: ECHO (envia e recebe a mesma mensagem para indicar que usuário está ativo).
    */
    
    

    
    
    private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarActionPerformed
        // TODO add your handling code here:
        int destPort = Integer.parseInt(txtDestPort.getText());
        int origPort = Integer.parseInt(txtOrigPort.getText());
        
        if (chatController == null){
            chatController = new ChatController(this,origPort);
        }
                
        String msg = txtMsg.getText();
        String apelido = txtApelido.getText();
        
        txtMsg.setText("");
        
        if (!msg.isEmpty()){
            try {
                
                InetAddress ip = InetAddress.getByName(txtDestIP.getText());
                
                String pacote=new String();
                List<String> emojis = Arrays.asList(":)",":(",":v");
                
                if (emojis.contains(msg)){ // tipo emoji
                    pacote = pacote.concat("2;"); 
                    
                }else if (msg.contains("ECHO")) {
                    pacote = pacote.concat("4;"); // tipo ECHO
                    
                }else if (msg.contains("HTTP://")) { // tipo link
                    pacote = pacote.concat("3;");
                    
                } else {
                    pacote = pacote.concat("1;"); // tipo mensagem normal
                }
                
                pacote = pacote.concat(apelido.length()+";");
                pacote = pacote.concat(apelido+";");
                pacote = pacote.concat(msg.length()+";");
                pacote = pacote.concat(msg);
                
                //chatController.sendMsg(ip,port,msg);
                chatController.sendMsg(ip,destPort,pacote);
                
                areaMsg.append("[Eu]: "+msg+'\n');
                areaMsg.setCaretPosition(areaMsg.getDocument().getLength());
            
            
            } catch (UnknownHostException ex) {
                Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_btnEnviarActionPerformed
}
    

public void showMessage(String msg) throws UnknownHostException, IOException{
    //separando as partes do protocolo
    
    
    String[] parts = msg.split(";");
    
    int msgTipo = Integer.parseInt(parts[0]);
    int apelidoLength = Integer.parseInt(parts[1]);
    String apelido = parts[2];
    int msgLength = Integer.parseInt(parts[3]);
    String msgReceived= parts[4];
    
    String msgFormatted= "["+apelido+"]: ";
    
    switch (msgTipo){
        case 1: // Tipo 1 : mensagem normal
            msgFormatted+= msgReceived;
            break;
        case 2: // Tipo 2 : emoji
            msgFormatted+=getEmote(msgReceived);
            break;
        case 3:// URL ??
            msgFormatted+= msgReceived;
            break;
        case 4: // ECHO 
            //Pegando a origem e destino para responder o ECHO
            int destPort = Integer.parseInt(txtDestPort.getText());
            int origPort = Integer.parseInt(txtOrigPort.getText());
            InetAddress ip = InetAddress.getByName(txtDestIP.getText());
            
            //Modificando o tipo de mensagem para 1 ( mensagem normal ) , para que não fique em um loop infinito.
            char[] charArray = msg.toCharArray();
            charArray[0] = '1';
            String modifiedMsg = new String(charArray);
            
            //Enviando a mensagem de volta
            chatController.sendMsg(ip,destPort,modifiedMsg);
            
            msgFormatted+= msgReceived;
            break;
                        
    }
    areaMsg.append(">>"+msgFormatted+"\n");
}

public String getEmote(String asciiEmoticon){
    switch(asciiEmoticon){
                case ":)":
                    return "😃";
                case ":(":
                    return "😢";
                case ":v":
                    return "😎";
            }
    return "❌";
}
    
    /**
     * @param args the command line arguments
     */
    
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
public static void main(String args[]){        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaMsg;
    private javax.swing.JButton btnEnviar;
    private javax.swing.JLabel lblApelido;
    private javax.swing.JLabel lblDestIP;
    private javax.swing.JLabel lblDestPort;
    private javax.swing.JLabel lblOrigPort;
    private javax.swing.JScrollPane scrollMsgArea;
    private javax.swing.JTextField txtApelido;
    private javax.swing.JTextField txtDestIP;
    private javax.swing.JTextField txtDestPort;
    private javax.swing.JTextField txtMsg;
    private javax.swing.JTextField txtOrigPort;
    // End of variables declaration//GEN-END:variables
}
